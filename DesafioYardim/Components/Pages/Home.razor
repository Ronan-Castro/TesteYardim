@page "/"
@using DesafioYardim.Components.Modal
@using System.Text
@using DesafioYardim.Service
@inject IDialogService DialogService
@inject IConversorService Conversor
@inject IJSRuntime JSRuntime

<PageTitle>ConversorJsonCsv</PageTitle>

<MudFileUpload T="IBrowserFile"
               Accept=".json"
               @ref="_arquivoUpload"
               OnFilesChanged="OnInputFileChanged" Hidden="false"
               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
               InputStyle="opacity:0" tabindex="-1"
               @ondrop="@LimparClasseArrastar"
               @ondragenter="@SetClasseArrastar"
               @ondragleave="@LimparClasseArrastar"
               @ondragend="@LimparClasseArrastar">
    <ActivatorContent>
        <MudPaper Height="300px" Outlined="true" Class="@_ClasseArrastar">
            @if (string.IsNullOrEmpty(_arquivoTemporario))
            {
                <MudText Typo="Typo.h6">Arraste e solte o arquivo aqui</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">@_arquivoTemporario</MudText>
            }
        </MudPaper>
    </ActivatorContent>
</MudFileUpload>

<MudButton Class="ma-3" Color="Color.Primary"
           Disabled="@(!isValid)"
           OnClick="@ConverterJsonCsv"
           Variant="Variant.Filled">
    Converter de Json para CSV
</MudButton>

<MudButton Class="ma-3" Color="Color.Error"
           OnClick="@Limpar"
           Variant="Variant.Filled">
    Limpar
</MudButton>

@if (!string.IsNullOrEmpty(csvResult))
{
    <MudButton Class="ma-3" Color="Color.Secondary" OnClick="@BaixarCsv" Variant="Variant.Filled">
        Baixar CSV
    </MudButton>
}

<MudGrid>
    @if (!string.IsNullOrEmpty(csvResult))
    {
        <MudItem xs="6">
            <MudText Typo="Typo.h6" Class="mt-4">Conteúdo do CSV Gerado (clique em "Baixar CSV" para baixar o arquivo 'dados.csv'):</MudText>
            <MudTextField @bind-Value="csvResult" ReadOnly="true" Lines="10" FullWidth="true" />
        </MudItem>
    }

    @if (csvData != null && csvData.Count > 0)
    {
        <MudItem xs="6">
            <MudText Typo="Typo.h5">Tabela criada a partir do csv gerado</MudText>
            <MudTable Class="my-3" Items="@csvData" Hover="true" Bordered="true">
                <HeaderContent>
                    @if (csvData.Count > 0)
                    {
                        @foreach (var header in csvData.First().Keys)
                        {
                            <MudTh>@header</MudTh>
                        }
                    }
                </HeaderContent>
                <RowTemplate Context="item">
                    @foreach (var value in item.Values)
                    {
                        <MudTd>@value</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
    }
</MudGrid>
<script src="js/DownloadCsv.js"></script>

@code {
    List<string> ExtensoesPermitidas = new() { "application/json" };

    string _arquivoTemporario = string.Empty;
    private bool isValid = false;
    private string csvOutput = string.Empty;
    private string csvResult = string.Empty;

    private List<Dictionary<string, string>> csvData = new();
    private List<string> cabecalho = new();

    private const string PadraoClasseArrastar = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _ClasseArrastar = PadraoClasseArrastar;

    private void SetClasseArrastar()
        => _ClasseArrastar = $"{PadraoClasseArrastar} mud-border-primary";

    private void LimparClasseArrastar()
        => _ClasseArrastar = PadraoClasseArrastar;

    private MudFileUpload<IBrowserFile>? _arquivoUpload;
    private IBrowserFile? _arquivoDadosUpload;

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        LimparClasseArrastar();
        var arquivo = e.GetMultipleFiles().FirstOrDefault();
        if (arquivo != null)
        {
            _arquivoDadosUpload = arquivo;
            if (await ValidarJson())
            {
                ExibirJson();
                isValid = true;
            }
            else
            {
                _arquivoDadosUpload = null;
            }
        }
    }

    private async Task ConverterJsonCsv()
    {
        if (_arquivoDadosUpload == null)
            return;

        try
        {
            var dados = await Conversor.LerJson(_arquivoDadosUpload);
            if (dados == null)
            {
                await OpenDialogAsync("JSON inválido ou vazio.", "Erro ao ler conteúdo");
                return;
            }

            csvResult = Conversor.GerarCsv(dados);
            csvData = dados;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await OpenDialogAsync($"Erro ao processar o JSON: {ex.Message}", "Erro");
        }
    }

    private async Task<bool> ValidarJson()
    {
        if (_arquivoDadosUpload != null && !ExtensoesPermitidas.Contains(_arquivoDadosUpload.ContentType))
        {
            await OpenDialogAsync("Formato inválido! Apenas arquivos JSON são permitidos.", "Formato Inválido");
            return false;
        }
        return true;
    }

    private Task OpenDialogAsync(string content, string title)
    {
        var parameters = new DialogParameters<SimpleDialog>
        {
            { x => x.Content, content },
            { x => x.Title, title }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<SimpleDialog>("Simple Dialog", parameters, options);
    }

    private void ExibirJson()
    {
        if (_arquivoDadosUpload != null)
        {
            _arquivoTemporario = _arquivoDadosUpload.Name;
            StateHasChanged();
        }
    }

    private void Limpar()
    {
        _arquivoTemporario = string.Empty;
        csvResult = string.Empty;
        csvData.Clear();
        isValid = false;
        StateHasChanged();
    }

    private async Task BaixarCsv()
    {
        try
        {
            if (!string.IsNullOrEmpty(csvResult))
            {
                var csvBytes = Encoding.UTF8.GetBytes(csvResult);
                var csvStream = new MemoryStream(csvBytes);

                using var streamRef = new DotNetStreamReference(stream: csvStream);
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "dados.csv", streamRef);
            }
        }
        catch (Exception ex)
        {
            await OpenDialogAsync($"Erro ao gerar o arquivo CSV: {ex.Message}", "Erro");
        }
    }
}
